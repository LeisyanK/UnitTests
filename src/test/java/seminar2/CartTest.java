package seminar2;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/*
* –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1
–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Å —Ä–∞–∑–Ω—ã–º–∏
—Ç–æ–≤–∞—Ä–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å—á–∏—Ç–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
* */
public class CartTest {
    private Cart cart;
    private Product product1; // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è3
    private Product product2; // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è3
    private Shop shop4; // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è4
    private Cart cart4; // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è4
    private Shop shop5; // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è5
    private Cart cart5; // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è5

    @BeforeEach // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    public void setUp() {
        cart = new Cart();
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);// –¥–ª—è –∑–∞–¥–∞–Ω–∏—è3
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1);// –¥–ª—è –∑–∞–¥–∞–Ω–∏—è3
        shop4 = new Shop(); // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è4
        cart4 = new Cart(); // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è4
        shop5 = new Shop(); // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è4
        cart5 = new Cart(); // –¥–ª—è –∑–∞–¥–∞–Ω–∏—è4
    }

    @Test
    public void testCalculateTotalWithMultipleProducts() {
// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1);
        Product product3 = new Product(3, "–¢–æ–≤–∞—Ä 3", 200.0, 1);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);
        cart.addProduct(product2);
        cart.addProduct(product3);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        double expectedTotalPrice = 1000.0; // 500 + 300 + 200
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }

    @Test
    public void testCalculateTotalWithEmptyCart() {
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞–≤–Ω–∞ 0.0
        double expectedTotalPrice = 0.0;
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01);
    }

    @Test
    public void testCalculateTotalWithSingleProduct() {
// –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç
        Product product = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º —Ä–∞–≤–Ω–∞ —Ü–µ–Ω–µ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        double expectedTotalPrice = 500.0;
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01);
    }

    /*
    * –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2
–°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
—ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å—á–∏—Ç–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
* */
    @Test
    public void testCalculateTotalWithMultipleSameProducts() {
// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 1", 500.0, 1);
        Product product3 = new Product(3, "–¢–æ–≤–∞—Ä 3", 200.0, 1);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);
        cart.addProduct(product2);
        cart.addProduct(product3);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        double expectedTotalPrice = 1200.0; // 500 + 500 + 200
        double actualTotalPrice = cart.calculateTotal();
        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }

    /*–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
–ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑
–∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
–∫–æ—Ä–∑–∏–Ω—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –º–µ–Ω—è–µ—Ç—Å—è
*/
    @Test
    public void testRecalculateTotalAfterRemovingProduct() {
// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart.addProduct(product1);
        cart.addProduct(product2);

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
        double initialTotalPrice = cart.calculateTotal();

// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart.removeProduct(product1);

// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        double updatedTotalPrice = cart.calculateTotal();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        assertNotEquals(initialTotalPrice, updatedTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
    }

    // –∑–∞–¥–∞–Ω–∏—è4
    /**
     * –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
     * —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
     * —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.
     * üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
     * —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ —á–∏—Å–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Test
    public void testProductRemoveFromShopOnAddingToCart(){
        shop4.addProduct(product1);
        shop4.addProduct(product2);
        int initialProductInShop = shop4.getProducts().size();
//        System.out.println(initialProductInShop);

        cart.addProduct(product1);
        int productInCart = cart.getItems().size();
//        System.out.println(productInCart);
        shop4.removeProduct(product1);
        int finalProductInShop = shop4.getProducts().size();
//        System.out.println(finalProductInShop);
        // expected, actual
        assertEquals(finalProductInShop, initialProductInShop - productInCart);

//        // –î–æ–±–∞–≤–ª—è–µ–º 3 —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
//        cart.addProduct(product, 3);
//
//// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ 3
//        int expectedQuantityInShop = 2; // 5 - 3
//        int actualQuantityInShop = shop.findProductById(product.getId()).getQuantity();
//        assertEquals(expectedQuantityInShop, actualQuantityInShop);
    }

//    @Test // d—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–¥–∞–Ω–∏—è 4
//    public void func(){
//        shop.addProduct(product);
//
//// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//        cart.addProduct(product);
//
//// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
//        int initialQuantity = shop.getProductQuantity(product);
//        int cartQuantity = cart.getProductQuantity(product);
//
//        shop.decreaseProductQuantity(product, cartQuantity);
//
//        int updatedQuantity = shop.getProductQuantity(product);
//        int expectedQuantity = initialQuantity - cartQuantity;
//
//        assertEquals(expectedQuantity, updatedQuantity);
//    }

//    public void decreaseProductQuantity(Product product, int quantity) {
//        for (int i = 0; i < products.size(); i++) {
//            Product shopProduct = products.get(i);
//            if (shopProduct.getId() == product.getId()) {
//                int currentQuantity = shopProduct.getQuantity();
//                if (currentQuantity >= quantity) {
//                    shopProduct.setQuantity(currentQuantity - quantity);
//                    if (currentQuantity - quantity == 0) {
//// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Å—Ç–∞–ª–æ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é, —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
//                        removeProduct(shopProduct);
//                    }
//                    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
//                } else {
//// –ú–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞,
//// –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
//                    throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ");
//                }
//            }
//        }
//    }

    /*
    * –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
–°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è
–ø—Ä–æ–¥—É–∫—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞.
üí° –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ë–æ–ª—å—à–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç
–∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–ª—å–∑—è, –æ–Ω –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–∫–µ*/
    @Test
    public void testWithMultipleProducts() {
// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Product product1 = new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 2);
        Product product2 = new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1);
        Product product3 = new Product(3, "–¢–æ–≤–∞—Ä 3", 200.0, 1);
        shop5.addProduct(product1);
        shop5.addProduct(product2);
        shop5.addProduct(product3);


// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart5.addProduct(new Product(1, "–¢–æ–≤–∞—Ä 1", 500.0, 1));
        cart5.addProduct(new Product(2, "–¢–æ–≤–∞—Ä 2", 300.0, 1));
//        cart5.addProduct(product3);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–π—Å—è —Ç–æ–≤–∞—Ä
        int quantityInCart = cart5.getQuantityByID(2);
        int quantityInShop = shop5.getQuantityByID(2);
        // expected, actual
        assertNotEquals(0, quantityInShop - quantityInCart, "–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è");
//        assertEquals(expectedTotalPrice, actualTotalPrice, 0.01); // –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.01 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π

        // c —Å–µ–º–∏–Ω–∞—Ä–∞
        shop5 = new Shop();
        shop5.addProduct(product1);
//        cart5.addProduct(product1);
        cart5.addProductToCartByID(1);
        assertThrows(CartException.class, () -> {
            cart5.addProductToCartByID(1);
        });

        Product product = shop5.getProducts().get(0);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞
        assertEquals(product.getQuantity(), 0);
        assertFalse(cart.containsProduct(product1));
    }


}
